
import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;
import ij.gui.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.GeneralPath;
import java.util.*;

	public class Draw_Rectangle implements PlugInFilter, MouseListener, MouseMotionListener{

		ImagePlus img;
		ImageCanvas canvas;
		static Vector images = new Vector();
		ImageProcessor ip;
		Rectangle box = new Rectangle();

		public int setup(String arg, ImagePlus img) {
			this.img = img;
			IJ.register(Draw_Rectangle.class);
			return DOES_ALL+NO_CHANGES;
		}

		public void run(ImageProcessor ip) {
			this.ip = ip;
			Integer id = new Integer(img.getID());
			if (images.contains(id)) {
				IJ.log("Already listening to this image");
				return;
				} 
			else {
				ImageWindow win = img.getWindow();
				canvas = win.getCanvas();
				canvas.addMouseListener(this);
				canvas.addMouseMotionListener(this);
				images.addElement(id);
			}
			IJ.run("Save");
			}

		public void mousePressed(MouseEvent e) {
			int x = e.getX();
			int y = e.getY();
			int offscreenX = canvas.offScreenX(x);
			int offscreenY = canvas.offScreenY(y);
			IJ.log("Mouse pressed: "+offscreenX+","+offscreenY+modifiers(e.getModifiers()));
			
			box.x = offscreenX;
			box.y = offscreenY;
			box.width = 0;
			box.height = 0;
		}
		
		public void mouseReleased(MouseEvent e) {
			int x = e.getX();
			int y = e.getY();
			int offscreenX = canvas.offScreenX(x);
			int offscreenY = canvas.offScreenY(y);
			Rectangle r = ip.getRoi();
			ip.setColor(Color.blue);
			
			if (offscreenX < box.x) {
				box.width = box.x-offscreenX;
				box.x = offscreenX;
			}
			
			else {
				box.width = offscreenX-box.x;
				}
			
			if (offscreenY < box.y) {
				box.height = box.y-offscreenY;
				box.y = offscreenY;
				}
			
			else {
				box.height = offscreenY-box.y;
				}

			IJ.log("mouseReleased: " + box.x + " " + box.y + " " + box.width + " " + box.height);
			ip.setLineWidth(3);
			ip.setColor(Color.blue);
			ip.drawRect(r.x + box.x, r.y + box.y, box.width, box.height);
			canvas.repaint();
			
			GeneralPath path = new GeneralPath();
			path.moveTo(200, 300);
			path.lineTo(300, 300);
			Roi roi = new ShapeRoi((Shape) path);
			roi.setStrokeColor(Color.red);
			ip.setOverlay(new Overlay(roi));
			ip.setOverlay(null);
			}
		
		public void mouseDragged(MouseEvent e) {
			
			}
		
		public static String modifiers(int flags) {
			String s = " [ ";
			if (flags == 0) return "";
			if ((flags & Event.SHIFT_MASK) != 0) 
				s += "Shift ";
			if ((flags & Event.CTRL_MASK) != 0) 
				s += "Control ";
			if ((flags & Event.META_MASK) != 0) 
				s += "Meta (right button) ";
			if ((flags & Event.ALT_MASK) != 0) 
				s += "Alt ";
				s += "]";
			if (s.equals(" [ ]"))
				s = " [no modifiers]";
			return s;
			}

		public void mouseExited(MouseEvent e) {
			
		}
		public void mouseClicked(MouseEvent e) {}
		public void mouseEntered(MouseEvent e) {}
		public void mouseMoved(MouseEvent e) {}

}
